#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Sat Jul 18 17:11:29 2015 by generateDS.py version 2.16a.
#
# Command line options:
#   ('-o', 'meetCI.py')
#   ('-s', 'meetCI_sub.py')
#
# Command line arguments:
#   meetCI.xsd
#
# Command line:
#   generateDS.py -o "meetCI.py" -s "meetCI_sub.py" meetCI.xsd
#
# Current working directory (os.getcwd()):
#   generateDS-2.16a0
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
from lxml import etree as etree_


Validate_simpletypes_ = True


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        parser = etree_.ETCompatXMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class MeetCI(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MachineLearning=None, ExpertSystem=None):
        self.original_tagname_ = None
        self.MachineLearning = MachineLearning
        self.ExpertSystem = ExpertSystem
    def factory(*args_, **kwargs_):
        if MeetCI.subclass:
            return MeetCI.subclass(*args_, **kwargs_)
        else:
            return MeetCI(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MachineLearning(self): return self.MachineLearning
    def set_MachineLearning(self, MachineLearning): self.MachineLearning = MachineLearning
    def get_ExpertSystem(self): return self.ExpertSystem
    def set_ExpertSystem(self, ExpertSystem): self.ExpertSystem = ExpertSystem
    def hasContent_(self):
        if (
            self.MachineLearning is not None or
            self.ExpertSystem is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MeetCI', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MeetCI')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MeetCI', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MeetCI'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MeetCI', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MachineLearning is not None:
            self.MachineLearning.export(outfile, level, namespace_, name_='MachineLearning', pretty_print=pretty_print)
        if self.ExpertSystem is not None:
            self.ExpertSystem.export(outfile, level, namespace_, name_='ExpertSystem', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='MeetCI'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.MachineLearning is not None:
            showIndent(outfile, level)
            outfile.write('MachineLearning=model_.MachineLearning(\n')
            self.MachineLearning.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ExpertSystem is not None:
            showIndent(outfile, level)
            outfile.write('ExpertSystem=model_.ExpertSystem(\n')
            self.ExpertSystem.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MachineLearning':
            obj_ = MachineLearning.factory()
            obj_.build(child_)
            self.MachineLearning = obj_
            obj_.original_tagname_ = 'MachineLearning'
        elif nodeName_ == 'ExpertSystem':
            obj_ = ExpertSystem.factory()
            obj_.build(child_)
            self.ExpertSystem = obj_
            obj_.original_tagname_ = 'ExpertSystem'
# end class MeetCI


class MachineLearning(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, classification=None, prediction=None):
        self.original_tagname_ = None
        self.classification = classification
        self.prediction = prediction
    def factory(*args_, **kwargs_):
        if MachineLearning.subclass:
            return MachineLearning.subclass(*args_, **kwargs_)
        else:
            return MachineLearning(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_classification(self): return self.classification
    def set_classification(self, classification): self.classification = classification
    def get_prediction(self): return self.prediction
    def set_prediction(self, prediction): self.prediction = prediction
    def hasContent_(self):
        if (
            self.classification is not None or
            self.prediction is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MachineLearning', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MachineLearning')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MachineLearning', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MachineLearning'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MachineLearning', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.classification is not None:
            self.classification.export(outfile, level, namespace_, name_='classification', pretty_print=pretty_print)
        if self.prediction is not None:
            self.prediction.export(outfile, level, namespace_, name_='prediction', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='MachineLearning'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.classification is not None:
            showIndent(outfile, level)
            outfile.write('classification=model_.classification(\n')
            self.classification.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.prediction is not None:
            showIndent(outfile, level)
            outfile.write('prediction=model_.prediction(\n')
            self.prediction.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'classification':
            obj_ = classification.factory()
            obj_.build(child_)
            self.classification = obj_
            obj_.original_tagname_ = 'classification'
        elif nodeName_ == 'prediction':
            obj_ = prediction.factory()
            obj_.build(child_)
            self.prediction = obj_
            obj_.original_tagname_ = 'prediction'
# end class MachineLearning


class MultiLayerPerceptron(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, inputLayerActivation='Linear', hiddenLayerActivation=None, hiddenLayers=None, outputLayerActivation=None, momentum=None, epochs=None, learningRate=None):
        self.original_tagname_ = None
        self.inputLayerActivation = inputLayerActivation
        self.validate_inputLayerActivationType(self.inputLayerActivation)
        self.hiddenLayerActivation = hiddenLayerActivation
        self.validate_hiddenLayerActivationType(self.hiddenLayerActivation)
        self.hiddenLayers = hiddenLayers
        self.validate_hiddenLayersType(self.hiddenLayers)
        self.outputLayerActivation = outputLayerActivation
        self.validate_outputLayerActivationType(self.outputLayerActivation)
        self.momentum = momentum
        self.epochs = epochs
        self.learningRate = learningRate
    def factory(*args_, **kwargs_):
        if MultiLayerPerceptron.subclass:
            return MultiLayerPerceptron.subclass(*args_, **kwargs_)
        else:
            return MultiLayerPerceptron(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_inputLayerActivation(self): return self.inputLayerActivation
    def set_inputLayerActivation(self, inputLayerActivation): self.inputLayerActivation = inputLayerActivation
    def get_hiddenLayerActivation(self): return self.hiddenLayerActivation
    def set_hiddenLayerActivation(self, hiddenLayerActivation): self.hiddenLayerActivation = hiddenLayerActivation
    def get_hiddenLayers(self): return self.hiddenLayers
    def set_hiddenLayers(self, hiddenLayers): self.hiddenLayers = hiddenLayers
    def get_outputLayerActivation(self): return self.outputLayerActivation
    def set_outputLayerActivation(self, outputLayerActivation): self.outputLayerActivation = outputLayerActivation
    def get_momentum(self): return self.momentum
    def set_momentum(self, momentum): self.momentum = momentum
    def get_epochs(self): return self.epochs
    def set_epochs(self, epochs): self.epochs = epochs
    def get_learningRate(self): return self.learningRate
    def set_learningRate(self, learningRate): self.learningRate = learningRate
    def validate_inputLayerActivationType(self, value):
        # Validate type inputLayerActivationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['Linear', 'Ramp', 'Step', 'Sigmoid', 'Tanh', 'Gaussian', 'Trapezoid', 'Sgn', 'Sin', 'Log']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on inputLayerActivationType' % {"value" : value.encode("utf-8")} )
    def validate_hiddenLayerActivationType(self, value):
        # Validate type hiddenLayerActivationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['Linear', 'Ramp', 'Step', 'Sigmoid', 'Tanh', 'Gaussian', 'Trapezoid', 'Sgn', 'Sin', 'Log', 'Softmax']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on hiddenLayerActivationType' % {"value" : value.encode("utf-8")} )
    def validate_hiddenLayersType(self, value):
        # Validate type hiddenLayersType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_hiddenLayersType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_hiddenLayersType_patterns_, ))
    validate_hiddenLayersType_patterns_ = [['^([0-9])+(,([0-9])+)$']]
    def validate_outputLayerActivationType(self, value):
        # Validate type outputLayerActivationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['Linear', 'Ramp', 'Step', 'Sigmoid', 'Tanh', 'Gaussian', 'Trapezoid', 'Sgn', 'Sin', 'Log', 'Softmax']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on outputLayerActivationType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.inputLayerActivation != "Linear" or
            self.hiddenLayerActivation is not None or
            self.hiddenLayers is not None or
            self.outputLayerActivation is not None or
            self.momentum is not None or
            self.epochs is not None or
            self.learningRate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MultiLayerPerceptron', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MultiLayerPerceptron')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MultiLayerPerceptron', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MultiLayerPerceptron'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MultiLayerPerceptron', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.inputLayerActivation != "Linear":
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinputLayerActivation>%s</%sinputLayerActivation>%s' % (namespace_, self.gds_format_string(quote_xml(self.inputLayerActivation).encode(ExternalEncoding), input_name='inputLayerActivation'), namespace_, eol_))
        if self.hiddenLayerActivation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shiddenLayerActivation>%s</%shiddenLayerActivation>%s' % (namespace_, self.gds_format_string(quote_xml(self.hiddenLayerActivation).encode(ExternalEncoding), input_name='hiddenLayerActivation'), namespace_, eol_))
        if self.hiddenLayers is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shiddenLayers>%s</%shiddenLayers>%s' % (namespace_, self.gds_format_string(quote_xml(self.hiddenLayers).encode(ExternalEncoding), input_name='hiddenLayers'), namespace_, eol_))
        if self.outputLayerActivation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soutputLayerActivation>%s</%soutputLayerActivation>%s' % (namespace_, self.gds_format_string(quote_xml(self.outputLayerActivation).encode(ExternalEncoding), input_name='outputLayerActivation'), namespace_, eol_))
        if self.momentum is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smomentum>%s</%smomentum>%s' % (namespace_, self.gds_format_float(self.momentum, input_name='momentum'), namespace_, eol_))
        if self.epochs is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sepochs>%s</%sepochs>%s' % (namespace_, self.gds_format_integer(self.epochs, input_name='epochs'), namespace_, eol_))
        if self.learningRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slearningRate>%s</%slearningRate>%s' % (namespace_, self.gds_format_float(self.learningRate, input_name='learningRate'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='MultiLayerPerceptron'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.inputLayerActivation is not None:
            showIndent(outfile, level)
            outfile.write('inputLayerActivation=%s,\n' % quote_python(self.inputLayerActivation).encode(ExternalEncoding))
        if self.hiddenLayerActivation is not None:
            showIndent(outfile, level)
            outfile.write('hiddenLayerActivation=%s,\n' % quote_python(self.hiddenLayerActivation).encode(ExternalEncoding))
        if self.hiddenLayers is not None:
            showIndent(outfile, level)
            outfile.write('hiddenLayers=%s,\n' % quote_python(self.hiddenLayers).encode(ExternalEncoding))
        if self.outputLayerActivation is not None:
            showIndent(outfile, level)
            outfile.write('outputLayerActivation=%s,\n' % quote_python(self.outputLayerActivation).encode(ExternalEncoding))
        if self.momentum is not None:
            showIndent(outfile, level)
            outfile.write('momentum=%f,\n' % self.momentum)
        if self.epochs is not None:
            showIndent(outfile, level)
            outfile.write('epochs=%d,\n' % self.epochs)
        if self.learningRate is not None:
            showIndent(outfile, level)
            outfile.write('learningRate=%f,\n' % self.learningRate)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'inputLayerActivation':
            inputLayerActivation_ = child_.text
            inputLayerActivation_ = self.gds_validate_string(inputLayerActivation_, node, 'inputLayerActivation')
            self.inputLayerActivation = inputLayerActivation_
            # validate type inputLayerActivationType
            self.validate_inputLayerActivationType(self.inputLayerActivation)
        elif nodeName_ == 'hiddenLayerActivation':
            hiddenLayerActivation_ = child_.text
            hiddenLayerActivation_ = self.gds_validate_string(hiddenLayerActivation_, node, 'hiddenLayerActivation')
            self.hiddenLayerActivation = hiddenLayerActivation_
            # validate type hiddenLayerActivationType
            self.validate_hiddenLayerActivationType(self.hiddenLayerActivation)
        elif nodeName_ == 'hiddenLayers':
            hiddenLayers_ = child_.text
            hiddenLayers_ = self.gds_validate_string(hiddenLayers_, node, 'hiddenLayers')
            self.hiddenLayers = hiddenLayers_
            # validate type hiddenLayersType
            self.validate_hiddenLayersType(self.hiddenLayers)
        elif nodeName_ == 'outputLayerActivation':
            outputLayerActivation_ = child_.text
            outputLayerActivation_ = self.gds_validate_string(outputLayerActivation_, node, 'outputLayerActivation')
            self.outputLayerActivation = outputLayerActivation_
            # validate type outputLayerActivationType
            self.validate_outputLayerActivationType(self.outputLayerActivation)
        elif nodeName_ == 'momentum':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'momentum')
            self.momentum = fval_
        elif nodeName_ == 'epochs':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'epochs')
            self.epochs = ival_
        elif nodeName_ == 'learningRate':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'learningRate')
            self.learningRate = fval_
# end class MultiLayerPerceptron


class RadialBasisFunctionNetwork(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, hiddenNeurons=None, outputLayerActivation=None, momentum=None, epochs=None, learningRate=None):
        self.original_tagname_ = None
        self.hiddenNeurons = hiddenNeurons
        self.outputLayerActivation = outputLayerActivation
        self.validate_outputLayerActivationType1(self.outputLayerActivation)
        self.momentum = momentum
        self.epochs = epochs
        self.learningRate = learningRate
    def factory(*args_, **kwargs_):
        if RadialBasisFunctionNetwork.subclass:
            return RadialBasisFunctionNetwork.subclass(*args_, **kwargs_)
        else:
            return RadialBasisFunctionNetwork(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_hiddenNeurons(self): return self.hiddenNeurons
    def set_hiddenNeurons(self, hiddenNeurons): self.hiddenNeurons = hiddenNeurons
    def get_outputLayerActivation(self): return self.outputLayerActivation
    def set_outputLayerActivation(self, outputLayerActivation): self.outputLayerActivation = outputLayerActivation
    def get_momentum(self): return self.momentum
    def set_momentum(self, momentum): self.momentum = momentum
    def get_epochs(self): return self.epochs
    def set_epochs(self, epochs): self.epochs = epochs
    def get_learningRate(self): return self.learningRate
    def set_learningRate(self, learningRate): self.learningRate = learningRate
    def validate_outputLayerActivationType1(self, value):
        # Validate type outputLayerActivationType1, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['Linear', 'Ramp', 'Step', 'Sigmoid', 'Tanh', 'Gaussian', 'Trapezoid', 'Sgn', 'Sin', 'Log', 'Softmax']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on outputLayerActivationType1' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.hiddenNeurons is not None or
            self.outputLayerActivation is not None or
            self.momentum is not None or
            self.epochs is not None or
            self.learningRate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RadialBasisFunctionNetwork', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RadialBasisFunctionNetwork')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RadialBasisFunctionNetwork', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RadialBasisFunctionNetwork'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RadialBasisFunctionNetwork', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.hiddenNeurons is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shiddenNeurons>%s</%shiddenNeurons>%s' % (namespace_, self.gds_format_integer(self.hiddenNeurons, input_name='hiddenNeurons'), namespace_, eol_))
        if self.outputLayerActivation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soutputLayerActivation>%s</%soutputLayerActivation>%s' % (namespace_, self.gds_format_string(quote_xml(self.outputLayerActivation).encode(ExternalEncoding), input_name='outputLayerActivation'), namespace_, eol_))
        if self.momentum is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smomentum>%s</%smomentum>%s' % (namespace_, self.gds_format_float(self.momentum, input_name='momentum'), namespace_, eol_))
        if self.epochs is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sepochs>%s</%sepochs>%s' % (namespace_, self.gds_format_integer(self.epochs, input_name='epochs'), namespace_, eol_))
        if self.learningRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slearningRate>%s</%slearningRate>%s' % (namespace_, self.gds_format_float(self.learningRate, input_name='learningRate'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='RadialBasisFunctionNetwork'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.hiddenNeurons is not None:
            showIndent(outfile, level)
            outfile.write('hiddenNeurons=%d,\n' % self.hiddenNeurons)
        if self.outputLayerActivation is not None:
            showIndent(outfile, level)
            outfile.write('outputLayerActivation=%s,\n' % quote_python(self.outputLayerActivation).encode(ExternalEncoding))
        if self.momentum is not None:
            showIndent(outfile, level)
            outfile.write('momentum=%f,\n' % self.momentum)
        if self.epochs is not None:
            showIndent(outfile, level)
            outfile.write('epochs=%d,\n' % self.epochs)
        if self.learningRate is not None:
            showIndent(outfile, level)
            outfile.write('learningRate=%f,\n' % self.learningRate)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'hiddenNeurons':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'hiddenNeurons')
            self.hiddenNeurons = ival_
        elif nodeName_ == 'outputLayerActivation':
            outputLayerActivation_ = child_.text
            outputLayerActivation_ = self.gds_validate_string(outputLayerActivation_, node, 'outputLayerActivation')
            self.outputLayerActivation = outputLayerActivation_
            # validate type outputLayerActivationType1
            self.validate_outputLayerActivationType1(self.outputLayerActivation)
        elif nodeName_ == 'momentum':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'momentum')
            self.momentum = fval_
        elif nodeName_ == 'epochs':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'epochs')
            self.epochs = ival_
        elif nodeName_ == 'learningRate':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'learningRate')
            self.learningRate = fval_
# end class RadialBasisFunctionNetwork


class RecurrentNeuralNetwork(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RNN_Type=None, hiddenLayerActivation=None, hiddenNeurons=None, outputLayerActivation=None, epochs=None, momentum=None, learningRate=None):
        self.original_tagname_ = None
        self.RNN_Type = RNN_Type
        self.validate_RNN_TypeType(self.RNN_Type)
        self.hiddenLayerActivation = hiddenLayerActivation
        self.validate_hiddenLayerActivationType2(self.hiddenLayerActivation)
        self.hiddenNeurons = hiddenNeurons
        self.outputLayerActivation = outputLayerActivation
        self.validate_outputLayerActivationType3(self.outputLayerActivation)
        self.epochs = epochs
        self.momentum = momentum
        self.learningRate = learningRate
    def factory(*args_, **kwargs_):
        if RecurrentNeuralNetwork.subclass:
            return RecurrentNeuralNetwork.subclass(*args_, **kwargs_)
        else:
            return RecurrentNeuralNetwork(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RNN_Type(self): return self.RNN_Type
    def set_RNN_Type(self, RNN_Type): self.RNN_Type = RNN_Type
    def get_hiddenLayerActivation(self): return self.hiddenLayerActivation
    def set_hiddenLayerActivation(self, hiddenLayerActivation): self.hiddenLayerActivation = hiddenLayerActivation
    def get_hiddenNeurons(self): return self.hiddenNeurons
    def set_hiddenNeurons(self, hiddenNeurons): self.hiddenNeurons = hiddenNeurons
    def get_outputLayerActivation(self): return self.outputLayerActivation
    def set_outputLayerActivation(self, outputLayerActivation): self.outputLayerActivation = outputLayerActivation
    def get_epochs(self): return self.epochs
    def set_epochs(self, epochs): self.epochs = epochs
    def get_momentum(self): return self.momentum
    def set_momentum(self, momentum): self.momentum = momentum
    def get_learningRate(self): return self.learningRate
    def set_learningRate(self, learningRate): self.learningRate = learningRate
    def validate_RNN_TypeType(self, value):
        # Validate type RNN_TypeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['Elman', 'Jordan']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on RNN_TypeType' % {"value" : value.encode("utf-8")} )
    def validate_hiddenLayerActivationType2(self, value):
        # Validate type hiddenLayerActivationType2, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['Linear', 'Ramp', 'Step', 'Sigmoid', 'Tanh', 'Gaussian', 'Trapezoid', 'Sgn', 'Sin', 'Log', 'Softmax']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on hiddenLayerActivationType2' % {"value" : value.encode("utf-8")} )
    def validate_outputLayerActivationType3(self, value):
        # Validate type outputLayerActivationType3, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['Linear', 'Ramp', 'Step', 'Sigmoid', 'Tanh', 'Gaussian', 'Trapezoid', 'Sgn', 'Sin', 'Log', 'Softmax']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on outputLayerActivationType3' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.RNN_Type is not None or
            self.hiddenLayerActivation is not None or
            self.hiddenNeurons is not None or
            self.outputLayerActivation is not None or
            self.epochs is not None or
            self.momentum is not None or
            self.learningRate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RecurrentNeuralNetwork', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RecurrentNeuralNetwork')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RecurrentNeuralNetwork', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RecurrentNeuralNetwork'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RecurrentNeuralNetwork', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RNN_Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRNN_Type>%s</%sRNN_Type>%s' % (namespace_, self.gds_format_string(quote_xml(self.RNN_Type).encode(ExternalEncoding), input_name='RNN_Type'), namespace_, eol_))
        if self.hiddenLayerActivation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shiddenLayerActivation>%s</%shiddenLayerActivation>%s' % (namespace_, self.gds_format_string(quote_xml(self.hiddenLayerActivation).encode(ExternalEncoding), input_name='hiddenLayerActivation'), namespace_, eol_))
        if self.hiddenNeurons is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shiddenNeurons>%s</%shiddenNeurons>%s' % (namespace_, self.gds_format_integer(self.hiddenNeurons, input_name='hiddenNeurons'), namespace_, eol_))
        if self.outputLayerActivation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soutputLayerActivation>%s</%soutputLayerActivation>%s' % (namespace_, self.gds_format_string(quote_xml(self.outputLayerActivation).encode(ExternalEncoding), input_name='outputLayerActivation'), namespace_, eol_))
        if self.epochs is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sepochs>%s</%sepochs>%s' % (namespace_, self.gds_format_integer(self.epochs, input_name='epochs'), namespace_, eol_))
        if self.momentum is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smomentum>%s</%smomentum>%s' % (namespace_, self.gds_format_float(self.momentum, input_name='momentum'), namespace_, eol_))
        if self.learningRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slearningRate>%s</%slearningRate>%s' % (namespace_, self.gds_format_float(self.learningRate, input_name='learningRate'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='RecurrentNeuralNetwork'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.RNN_Type is not None:
            showIndent(outfile, level)
            outfile.write('RNN_Type=%s,\n' % quote_python(self.RNN_Type).encode(ExternalEncoding))
        if self.hiddenLayerActivation is not None:
            showIndent(outfile, level)
            outfile.write('hiddenLayerActivation=%s,\n' % quote_python(self.hiddenLayerActivation).encode(ExternalEncoding))
        if self.hiddenNeurons is not None:
            showIndent(outfile, level)
            outfile.write('hiddenNeurons=%d,\n' % self.hiddenNeurons)
        if self.outputLayerActivation is not None:
            showIndent(outfile, level)
            outfile.write('outputLayerActivation=%s,\n' % quote_python(self.outputLayerActivation).encode(ExternalEncoding))
        if self.epochs is not None:
            showIndent(outfile, level)
            outfile.write('epochs=%d,\n' % self.epochs)
        if self.momentum is not None:
            showIndent(outfile, level)
            outfile.write('momentum=%f,\n' % self.momentum)
        if self.learningRate is not None:
            showIndent(outfile, level)
            outfile.write('learningRate=%f,\n' % self.learningRate)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RNN_Type':
            RNN_Type_ = child_.text
            RNN_Type_ = self.gds_validate_string(RNN_Type_, node, 'RNN_Type')
            self.RNN_Type = RNN_Type_
            # validate type RNN_TypeType
            self.validate_RNN_TypeType(self.RNN_Type)
        elif nodeName_ == 'hiddenLayerActivation':
            hiddenLayerActivation_ = child_.text
            hiddenLayerActivation_ = self.gds_validate_string(hiddenLayerActivation_, node, 'hiddenLayerActivation')
            self.hiddenLayerActivation = hiddenLayerActivation_
            # validate type hiddenLayerActivationType2
            self.validate_hiddenLayerActivationType2(self.hiddenLayerActivation)
        elif nodeName_ == 'hiddenNeurons':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'hiddenNeurons')
            self.hiddenNeurons = ival_
        elif nodeName_ == 'outputLayerActivation':
            outputLayerActivation_ = child_.text
            outputLayerActivation_ = self.gds_validate_string(outputLayerActivation_, node, 'outputLayerActivation')
            self.outputLayerActivation = outputLayerActivation_
            # validate type outputLayerActivationType3
            self.validate_outputLayerActivationType3(self.outputLayerActivation)
        elif nodeName_ == 'epochs':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'epochs')
            self.epochs = ival_
        elif nodeName_ == 'momentum':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'momentum')
            self.momentum = fval_
        elif nodeName_ == 'learningRate':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'learningRate')
            self.learningRate = fval_
# end class RecurrentNeuralNetwork


class RandomForest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, nTrees=None, maxDepth=None, maxLeafNodes=None, minSamplesSplit=None, minSamplesLeaf=None, minFractionLeaf=None):
        self.original_tagname_ = None
        self.nTrees = nTrees
        self.maxDepth = maxDepth
        self.maxLeafNodes = maxLeafNodes
        self.minSamplesSplit = minSamplesSplit
        self.minSamplesLeaf = minSamplesLeaf
        self.minFractionLeaf = minFractionLeaf
    def factory(*args_, **kwargs_):
        if RandomForest.subclass:
            return RandomForest.subclass(*args_, **kwargs_)
        else:
            return RandomForest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_nTrees(self): return self.nTrees
    def set_nTrees(self, nTrees): self.nTrees = nTrees
    def get_maxDepth(self): return self.maxDepth
    def set_maxDepth(self, maxDepth): self.maxDepth = maxDepth
    def get_maxLeafNodes(self): return self.maxLeafNodes
    def set_maxLeafNodes(self, maxLeafNodes): self.maxLeafNodes = maxLeafNodes
    def get_minSamplesSplit(self): return self.minSamplesSplit
    def set_minSamplesSplit(self, minSamplesSplit): self.minSamplesSplit = minSamplesSplit
    def get_minSamplesLeaf(self): return self.minSamplesLeaf
    def set_minSamplesLeaf(self, minSamplesLeaf): self.minSamplesLeaf = minSamplesLeaf
    def get_minFractionLeaf(self): return self.minFractionLeaf
    def set_minFractionLeaf(self, minFractionLeaf): self.minFractionLeaf = minFractionLeaf
    def hasContent_(self):
        if (
            self.nTrees is not None or
            self.maxDepth is not None or
            self.maxLeafNodes is not None or
            self.minSamplesSplit is not None or
            self.minSamplesLeaf is not None or
            self.minFractionLeaf is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RandomForest', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RandomForest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RandomForest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RandomForest'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RandomForest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.nTrees is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snTrees>%s</%snTrees>%s' % (namespace_, self.gds_format_integer(self.nTrees, input_name='nTrees'), namespace_, eol_))
        if self.maxDepth is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smaxDepth>%s</%smaxDepth>%s' % (namespace_, self.gds_format_integer(self.maxDepth, input_name='maxDepth'), namespace_, eol_))
        if self.maxLeafNodes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smaxLeafNodes>%s</%smaxLeafNodes>%s' % (namespace_, self.gds_format_integer(self.maxLeafNodes, input_name='maxLeafNodes'), namespace_, eol_))
        if self.minSamplesSplit is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sminSamplesSplit>%s</%sminSamplesSplit>%s' % (namespace_, self.gds_format_integer(self.minSamplesSplit, input_name='minSamplesSplit'), namespace_, eol_))
        if self.minSamplesLeaf is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sminSamplesLeaf>%s</%sminSamplesLeaf>%s' % (namespace_, self.gds_format_integer(self.minSamplesLeaf, input_name='minSamplesLeaf'), namespace_, eol_))
        if self.minFractionLeaf is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sminFractionLeaf>%s</%sminFractionLeaf>%s' % (namespace_, self.gds_format_float(self.minFractionLeaf, input_name='minFractionLeaf'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='RandomForest'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.nTrees is not None:
            showIndent(outfile, level)
            outfile.write('nTrees=%d,\n' % self.nTrees)
        if self.maxDepth is not None:
            showIndent(outfile, level)
            outfile.write('maxDepth=%d,\n' % self.maxDepth)
        if self.maxLeafNodes is not None:
            showIndent(outfile, level)
            outfile.write('maxLeafNodes=%d,\n' % self.maxLeafNodes)
        if self.minSamplesSplit is not None:
            showIndent(outfile, level)
            outfile.write('minSamplesSplit=%d,\n' % self.minSamplesSplit)
        if self.minSamplesLeaf is not None:
            showIndent(outfile, level)
            outfile.write('minSamplesLeaf=%d,\n' % self.minSamplesLeaf)
        if self.minFractionLeaf is not None:
            showIndent(outfile, level)
            outfile.write('minFractionLeaf=%f,\n' % self.minFractionLeaf)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'nTrees':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'nTrees')
            self.nTrees = ival_
        elif nodeName_ == 'maxDepth':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'maxDepth')
            self.maxDepth = ival_
        elif nodeName_ == 'maxLeafNodes':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'maxLeafNodes')
            self.maxLeafNodes = ival_
        elif nodeName_ == 'minSamplesSplit':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'minSamplesSplit')
            self.minSamplesSplit = ival_
        elif nodeName_ == 'minSamplesLeaf':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'minSamplesLeaf')
            self.minSamplesLeaf = ival_
        elif nodeName_ == 'minFractionLeaf':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'minFractionLeaf')
            self.minFractionLeaf = fval_
# end class RandomForest


class SupportVectorMachine(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, kernel=None, degree=None, gamma=None, coef=None, tol=None, maxIter=None):
        self.original_tagname_ = None
        self.kernel = kernel
        self.validate_kernelType(self.kernel)
        self.degree = degree
        self.gamma = gamma
        self.coef = coef
        self.tol = tol
        self.maxIter = maxIter
    def factory(*args_, **kwargs_):
        if SupportVectorMachine.subclass:
            return SupportVectorMachine.subclass(*args_, **kwargs_)
        else:
            return SupportVectorMachine(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_kernel(self): return self.kernel
    def set_kernel(self, kernel): self.kernel = kernel
    def get_degree(self): return self.degree
    def set_degree(self, degree): self.degree = degree
    def get_gamma(self): return self.gamma
    def set_gamma(self, gamma): self.gamma = gamma
    def get_coef(self): return self.coef
    def set_coef(self, coef): self.coef = coef
    def get_tol(self): return self.tol
    def set_tol(self, tol): self.tol = tol
    def get_maxIter(self): return self.maxIter
    def set_maxIter(self, maxIter): self.maxIter = maxIter
    def validate_kernelType(self, value):
        # Validate type kernelType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['Linear', 'RBF', 'Sigmoid', 'Poly', 'Precomputed', 'Trapezoid']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on kernelType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.kernel is not None or
            self.degree is not None or
            self.gamma is not None or
            self.coef is not None or
            self.tol is not None or
            self.maxIter is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SupportVectorMachine', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SupportVectorMachine')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SupportVectorMachine', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SupportVectorMachine'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SupportVectorMachine', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.kernel is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%skernel>%s</%skernel>%s' % (namespace_, self.gds_format_string(quote_xml(self.kernel).encode(ExternalEncoding), input_name='kernel'), namespace_, eol_))
        if self.degree is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdegree>%s</%sdegree>%s' % (namespace_, self.gds_format_integer(self.degree, input_name='degree'), namespace_, eol_))
        if self.gamma is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgamma>%s</%sgamma>%s' % (namespace_, self.gds_format_double(self.gamma, input_name='gamma'), namespace_, eol_))
        if self.coef is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scoef>%s</%scoef>%s' % (namespace_, self.gds_format_double(self.coef, input_name='coef'), namespace_, eol_))
        if self.tol is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stol>%s</%stol>%s' % (namespace_, self.gds_format_double(self.tol, input_name='tol'), namespace_, eol_))
        if self.maxIter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smaxIter>%s</%smaxIter>%s' % (namespace_, self.gds_format_integer(self.maxIter, input_name='maxIter'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='SupportVectorMachine'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.kernel is not None:
            showIndent(outfile, level)
            outfile.write('kernel=%s,\n' % quote_python(self.kernel).encode(ExternalEncoding))
        if self.degree is not None:
            showIndent(outfile, level)
            outfile.write('degree=%d,\n' % self.degree)
        if self.gamma is not None:
            showIndent(outfile, level)
            outfile.write('gamma=%e,\n' % self.gamma)
        if self.coef is not None:
            showIndent(outfile, level)
            outfile.write('coef=%e,\n' % self.coef)
        if self.tol is not None:
            showIndent(outfile, level)
            outfile.write('tol=%e,\n' % self.tol)
        if self.maxIter is not None:
            showIndent(outfile, level)
            outfile.write('maxIter=%d,\n' % self.maxIter)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'kernel':
            kernel_ = child_.text
            kernel_ = self.gds_validate_string(kernel_, node, 'kernel')
            self.kernel = kernel_
            # validate type kernelType
            self.validate_kernelType(self.kernel)
        elif nodeName_ == 'degree':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'degree')
            self.degree = ival_
        elif nodeName_ == 'gamma':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'gamma')
            self.gamma = fval_
        elif nodeName_ == 'coef':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'coef')
            self.coef = fval_
        elif nodeName_ == 'tol':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'tol')
            self.tol = fval_
        elif nodeName_ == 'maxIter':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'maxIter')
            self.maxIter = ival_
# end class SupportVectorMachine


class classification(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, datafile=None, input=None, output=None, classes=None, split=None, delimiter=None, algorithm=None):
        self.original_tagname_ = None
        self.datafile = datafile
        self.input = input
        self.output = output
        self.classes = classes
        self.split = split
        self.delimiter = delimiter
        self.algorithm = algorithm
    def factory(*args_, **kwargs_):
        if classification.subclass:
            return classification.subclass(*args_, **kwargs_)
        else:
            return classification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_datafile(self): return self.datafile
    def set_datafile(self, datafile): self.datafile = datafile
    def get_input(self): return self.input
    def set_input(self, input): self.input = input
    def get_output(self): return self.output
    def set_output(self, output): self.output = output
    def get_classes(self): return self.classes
    def set_classes(self, classes): self.classes = classes
    def get_split(self): return self.split
    def set_split(self, split): self.split = split
    def get_delimiter(self): return self.delimiter
    def set_delimiter(self, delimiter): self.delimiter = delimiter
    def get_algorithm(self): return self.algorithm
    def set_algorithm(self, algorithm): self.algorithm = algorithm
    def hasContent_(self):
        if (
            self.datafile is not None or
            self.input is not None or
            self.output is not None or
            self.classes is not None or
            self.split is not None or
            self.delimiter is not None or
            self.algorithm is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='classification', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='classification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='classification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='classification'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='classification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.datafile is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdatafile>%s</%sdatafile>%s' % (namespace_, self.gds_format_string(quote_xml(self.datafile).encode(ExternalEncoding), input_name='datafile'), namespace_, eol_))
        if self.input is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinput>%s</%sinput>%s' % (namespace_, self.gds_format_integer(self.input, input_name='input'), namespace_, eol_))
        if self.output is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soutput>%s</%soutput>%s' % (namespace_, self.gds_format_integer(self.output, input_name='output'), namespace_, eol_))
        if self.classes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sclasses>%s</%sclasses>%s' % (namespace_, self.gds_format_integer(self.classes, input_name='classes'), namespace_, eol_))
        if self.split is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssplit>%s</%ssplit>%s' % (namespace_, self.gds_format_float(self.split, input_name='split'), namespace_, eol_))
        if self.delimiter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdelimiter>%s</%sdelimiter>%s' % (namespace_, self.gds_format_string(quote_xml(self.delimiter).encode(ExternalEncoding), input_name='delimiter'), namespace_, eol_))
        if self.algorithm is not None:
            self.algorithm.export(outfile, level, namespace_, name_='algorithm', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='classification'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.datafile is not None:
            showIndent(outfile, level)
            outfile.write('datafile=%s,\n' % quote_python(self.datafile).encode(ExternalEncoding))
        if self.input is not None:
            showIndent(outfile, level)
            outfile.write('input=%d,\n' % self.input)
        if self.output is not None:
            showIndent(outfile, level)
            outfile.write('output=%d,\n' % self.output)
        if self.classes is not None:
            showIndent(outfile, level)
            outfile.write('classes=%d,\n' % self.classes)
        if self.split is not None:
            showIndent(outfile, level)
            outfile.write('split=%f,\n' % self.split)
        if self.delimiter is not None:
            showIndent(outfile, level)
            outfile.write('delimiter=%s,\n' % quote_python(self.delimiter).encode(ExternalEncoding))
        if self.algorithm is not None:
            showIndent(outfile, level)
            outfile.write('algorithm=model_.algorithmType(\n')
            self.algorithm.exportLiteral(outfile, level, name_='algorithm')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'datafile':
            datafile_ = child_.text
            datafile_ = self.gds_validate_string(datafile_, node, 'datafile')
            self.datafile = datafile_
        elif nodeName_ == 'input':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'input')
            self.input = ival_
        elif nodeName_ == 'output':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'output')
            self.output = ival_
        elif nodeName_ == 'classes':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'classes')
            self.classes = ival_
        elif nodeName_ == 'split':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'split')
            self.split = fval_
        elif nodeName_ == 'delimiter':
            delimiter_ = child_.text
            delimiter_ = self.gds_validate_string(delimiter_, node, 'delimiter')
            self.delimiter = delimiter_
        elif nodeName_ == 'algorithm':
            obj_ = algorithmType.factory()
            obj_.build(child_)
            self.algorithm = obj_
            obj_.original_tagname_ = 'algorithm'
# end class classification


class prediction(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, datafile=None, input=None, output=None, classes=None, split=None, delimiter=None, algorithm=None):
        self.original_tagname_ = None
        self.datafile = datafile
        self.input = input
        self.output = output
        self.classes = classes
        self.split = split
        self.delimiter = delimiter
        self.algorithm = algorithm
    def factory(*args_, **kwargs_):
        if prediction.subclass:
            return prediction.subclass(*args_, **kwargs_)
        else:
            return prediction(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_datafile(self): return self.datafile
    def set_datafile(self, datafile): self.datafile = datafile
    def get_input(self): return self.input
    def set_input(self, input): self.input = input
    def get_output(self): return self.output
    def set_output(self, output): self.output = output
    def get_classes(self): return self.classes
    def set_classes(self, classes): self.classes = classes
    def get_split(self): return self.split
    def set_split(self, split): self.split = split
    def get_delimiter(self): return self.delimiter
    def set_delimiter(self, delimiter): self.delimiter = delimiter
    def get_algorithm(self): return self.algorithm
    def set_algorithm(self, algorithm): self.algorithm = algorithm
    def hasContent_(self):
        if (
            self.datafile is not None or
            self.input is not None or
            self.output is not None or
            self.classes is not None or
            self.split is not None or
            self.delimiter is not None or
            self.algorithm is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='prediction', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='prediction')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='prediction', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='prediction'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='prediction', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.datafile is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdatafile>%s</%sdatafile>%s' % (namespace_, self.gds_format_string(quote_xml(self.datafile).encode(ExternalEncoding), input_name='datafile'), namespace_, eol_))
        if self.input is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinput>%s</%sinput>%s' % (namespace_, self.gds_format_integer(self.input, input_name='input'), namespace_, eol_))
        if self.output is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soutput>%s</%soutput>%s' % (namespace_, self.gds_format_integer(self.output, input_name='output'), namespace_, eol_))
        if self.classes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sclasses>%s</%sclasses>%s' % (namespace_, self.gds_format_integer(self.classes, input_name='classes'), namespace_, eol_))
        if self.split is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssplit>%s</%ssplit>%s' % (namespace_, self.gds_format_float(self.split, input_name='split'), namespace_, eol_))
        if self.delimiter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdelimiter>%s</%sdelimiter>%s' % (namespace_, self.gds_format_string(quote_xml(self.delimiter).encode(ExternalEncoding), input_name='delimiter'), namespace_, eol_))
        if self.algorithm is not None:
            self.algorithm.export(outfile, level, namespace_, name_='algorithm', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='prediction'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.datafile is not None:
            showIndent(outfile, level)
            outfile.write('datafile=%s,\n' % quote_python(self.datafile).encode(ExternalEncoding))
        if self.input is not None:
            showIndent(outfile, level)
            outfile.write('input=%d,\n' % self.input)
        if self.output is not None:
            showIndent(outfile, level)
            outfile.write('output=%d,\n' % self.output)
        if self.classes is not None:
            showIndent(outfile, level)
            outfile.write('classes=%d,\n' % self.classes)
        if self.split is not None:
            showIndent(outfile, level)
            outfile.write('split=%f,\n' % self.split)
        if self.delimiter is not None:
            showIndent(outfile, level)
            outfile.write('delimiter=%s,\n' % quote_python(self.delimiter).encode(ExternalEncoding))
        if self.algorithm is not None:
            showIndent(outfile, level)
            outfile.write('algorithm=model_.algorithmType4(\n')
            self.algorithm.exportLiteral(outfile, level, name_='algorithm')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'datafile':
            datafile_ = child_.text
            datafile_ = self.gds_validate_string(datafile_, node, 'datafile')
            self.datafile = datafile_
        elif nodeName_ == 'input':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'input')
            self.input = ival_
        elif nodeName_ == 'output':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'output')
            self.output = ival_
        elif nodeName_ == 'classes':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'classes')
            self.classes = ival_
        elif nodeName_ == 'split':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'split')
            self.split = fval_
        elif nodeName_ == 'delimiter':
            delimiter_ = child_.text
            delimiter_ = self.gds_validate_string(delimiter_, node, 'delimiter')
            self.delimiter = delimiter_
        elif nodeName_ == 'algorithm':
            obj_ = algorithmType4.factory()
            obj_.build(child_)
            self.algorithm = obj_
            obj_.original_tagname_ = 'algorithm'
# end class prediction


class clauseType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, extensiontype_=None):
        self.original_tagname_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if clauseType.subclass:
            return clauseType.subclass(*args_, **kwargs_)
        else:
            return clauseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='clauseType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='clauseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='clauseType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='clauseType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='clauseType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='clauseType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class clauseType


class greaterThanType(clauseType):
    subclass = None
    superclass = clauseType
    def __init__(self, value2=None, value1=None):
        self.original_tagname_ = None
        super(greaterThanType, self).__init__()
        self.value2 = _cast(None, value2)
        self.value1 = _cast(None, value1)
    def factory(*args_, **kwargs_):
        if greaterThanType.subclass:
            return greaterThanType.subclass(*args_, **kwargs_)
        else:
            return greaterThanType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_value2(self): return self.value2
    def set_value2(self, value2): self.value2 = value2
    def get_value1(self): return self.value1
    def set_value1(self, value1): self.value1 = value1
    def hasContent_(self):
        if (
            super(greaterThanType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='greaterThanType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='greaterThanType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='greaterThanType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='greaterThanType'):
        super(greaterThanType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='greaterThanType')
        if self.value2 is not None and 'value2' not in already_processed:
            already_processed.add('value2')
            outfile.write(' value2=%s' % (self.gds_format_string(quote_attrib(self.value2).encode(ExternalEncoding), input_name='value2'), ))
        if self.value1 is not None and 'value1' not in already_processed:
            already_processed.add('value1')
            outfile.write(' value1=%s' % (self.gds_format_string(quote_attrib(self.value1).encode(ExternalEncoding), input_name='value1'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='greaterThanType', fromsubclass_=False, pretty_print=True):
        super(greaterThanType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def exportLiteral(self, outfile, level, name_='greaterThanType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.value2 is not None and 'value2' not in already_processed:
            already_processed.add('value2')
            showIndent(outfile, level)
            outfile.write('value2="%s",\n' % (self.value2,))
        if self.value1 is not None and 'value1' not in already_processed:
            already_processed.add('value1')
            showIndent(outfile, level)
            outfile.write('value1="%s",\n' % (self.value1,))
        super(greaterThanType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(greaterThanType, self).exportLiteralChildren(outfile, level, name_)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value2', node)
        if value is not None and 'value2' not in already_processed:
            already_processed.add('value2')
            self.value2 = value
        value = find_attr_value_('value1', node)
        if value is not None and 'value1' not in already_processed:
            already_processed.add('value1')
            self.value1 = value
        super(greaterThanType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(greaterThanType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class greaterThanType


class greaterThanOrEqualType(clauseType):
    subclass = None
    superclass = clauseType
    def __init__(self, value2=None, value1=None):
        self.original_tagname_ = None
        super(greaterThanOrEqualType, self).__init__()
        self.value2 = _cast(None, value2)
        self.value1 = _cast(None, value1)
    def factory(*args_, **kwargs_):
        if greaterThanOrEqualType.subclass:
            return greaterThanOrEqualType.subclass(*args_, **kwargs_)
        else:
            return greaterThanOrEqualType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_value2(self): return self.value2
    def set_value2(self, value2): self.value2 = value2
    def get_value1(self): return self.value1
    def set_value1(self, value1): self.value1 = value1
    def hasContent_(self):
        if (
            super(greaterThanOrEqualType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='greaterThanOrEqualType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='greaterThanOrEqualType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='greaterThanOrEqualType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='greaterThanOrEqualType'):
        super(greaterThanOrEqualType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='greaterThanOrEqualType')
        if self.value2 is not None and 'value2' not in already_processed:
            already_processed.add('value2')
            outfile.write(' value2=%s' % (self.gds_format_string(quote_attrib(self.value2).encode(ExternalEncoding), input_name='value2'), ))
        if self.value1 is not None and 'value1' not in already_processed:
            already_processed.add('value1')
            outfile.write(' value1=%s' % (self.gds_format_string(quote_attrib(self.value1).encode(ExternalEncoding), input_name='value1'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='greaterThanOrEqualType', fromsubclass_=False, pretty_print=True):
        super(greaterThanOrEqualType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def exportLiteral(self, outfile, level, name_='greaterThanOrEqualType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.value2 is not None and 'value2' not in already_processed:
            already_processed.add('value2')
            showIndent(outfile, level)
            outfile.write('value2="%s",\n' % (self.value2,))
        if self.value1 is not None and 'value1' not in already_processed:
            already_processed.add('value1')
            showIndent(outfile, level)
            outfile.write('value1="%s",\n' % (self.value1,))
        super(greaterThanOrEqualType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(greaterThanOrEqualType, self).exportLiteralChildren(outfile, level, name_)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value2', node)
        if value is not None and 'value2' not in already_processed:
            already_processed.add('value2')
            self.value2 = value
        value = find_attr_value_('value1', node)
        if value is not None and 'value1' not in already_processed:
            already_processed.add('value1')
            self.value1 = value
        super(greaterThanOrEqualType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(greaterThanOrEqualType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class greaterThanOrEqualType


class lessThanType(clauseType):
    subclass = None
    superclass = clauseType
    def __init__(self, value2=None, value1=None):
        self.original_tagname_ = None
        super(lessThanType, self).__init__()
        self.value2 = _cast(None, value2)
        self.value1 = _cast(None, value1)
    def factory(*args_, **kwargs_):
        if lessThanType.subclass:
            return lessThanType.subclass(*args_, **kwargs_)
        else:
            return lessThanType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_value2(self): return self.value2
    def set_value2(self, value2): self.value2 = value2
    def get_value1(self): return self.value1
    def set_value1(self, value1): self.value1 = value1
    def hasContent_(self):
        if (
            super(lessThanType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='lessThanType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='lessThanType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='lessThanType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='lessThanType'):
        super(lessThanType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='lessThanType')
        if self.value2 is not None and 'value2' not in already_processed:
            already_processed.add('value2')
            outfile.write(' value2=%s' % (self.gds_format_string(quote_attrib(self.value2).encode(ExternalEncoding), input_name='value2'), ))
        if self.value1 is not None and 'value1' not in already_processed:
            already_processed.add('value1')
            outfile.write(' value1=%s' % (self.gds_format_string(quote_attrib(self.value1).encode(ExternalEncoding), input_name='value1'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='lessThanType', fromsubclass_=False, pretty_print=True):
        super(lessThanType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def exportLiteral(self, outfile, level, name_='lessThanType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.value2 is not None and 'value2' not in already_processed:
            already_processed.add('value2')
            showIndent(outfile, level)
            outfile.write('value2="%s",\n' % (self.value2,))
        if self.value1 is not None and 'value1' not in already_processed:
            already_processed.add('value1')
            showIndent(outfile, level)
            outfile.write('value1="%s",\n' % (self.value1,))
        super(lessThanType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(lessThanType, self).exportLiteralChildren(outfile, level, name_)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value2', node)
        if value is not None and 'value2' not in already_processed:
            already_processed.add('value2')
            self.value2 = value
        value = find_attr_value_('value1', node)
        if value is not None and 'value1' not in already_processed:
            already_processed.add('value1')
            self.value1 = value
        super(lessThanType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(lessThanType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class lessThanType


class lessThanOrEqualType(clauseType):
    subclass = None
    superclass = clauseType
    def __init__(self, value2=None, value1=None):
        self.original_tagname_ = None
        super(lessThanOrEqualType, self).__init__()
        self.value2 = _cast(None, value2)
        self.value1 = _cast(None, value1)
    def factory(*args_, **kwargs_):
        if lessThanOrEqualType.subclass:
            return lessThanOrEqualType.subclass(*args_, **kwargs_)
        else:
            return lessThanOrEqualType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_value2(self): return self.value2
    def set_value2(self, value2): self.value2 = value2
    def get_value1(self): return self.value1
    def set_value1(self, value1): self.value1 = value1
    def hasContent_(self):
        if (
            super(lessThanOrEqualType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='lessThanOrEqualType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='lessThanOrEqualType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='lessThanOrEqualType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='lessThanOrEqualType'):
        super(lessThanOrEqualType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='lessThanOrEqualType')
        if self.value2 is not None and 'value2' not in already_processed:
            already_processed.add('value2')
            outfile.write(' value2=%s' % (self.gds_format_string(quote_attrib(self.value2).encode(ExternalEncoding), input_name='value2'), ))
        if self.value1 is not None and 'value1' not in already_processed:
            already_processed.add('value1')
            outfile.write(' value1=%s' % (self.gds_format_string(quote_attrib(self.value1).encode(ExternalEncoding), input_name='value1'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='lessThanOrEqualType', fromsubclass_=False, pretty_print=True):
        super(lessThanOrEqualType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def exportLiteral(self, outfile, level, name_='lessThanOrEqualType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.value2 is not None and 'value2' not in already_processed:
            already_processed.add('value2')
            showIndent(outfile, level)
            outfile.write('value2="%s",\n' % (self.value2,))
        if self.value1 is not None and 'value1' not in already_processed:
            already_processed.add('value1')
            showIndent(outfile, level)
            outfile.write('value1="%s",\n' % (self.value1,))
        super(lessThanOrEqualType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(lessThanOrEqualType, self).exportLiteralChildren(outfile, level, name_)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value2', node)
        if value is not None and 'value2' not in already_processed:
            already_processed.add('value2')
            self.value2 = value
        value = find_attr_value_('value1', node)
        if value is not None and 'value1' not in already_processed:
            already_processed.add('value1')
            self.value1 = value
        super(lessThanOrEqualType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(lessThanOrEqualType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class lessThanOrEqualType


class equalType(clauseType):
    subclass = None
    superclass = clauseType
    def __init__(self, value2=None, value1=None):
        self.original_tagname_ = None
        super(equalType, self).__init__()
        self.value2 = _cast(None, value2)
        self.value1 = _cast(None, value1)
    def factory(*args_, **kwargs_):
        if equalType.subclass:
            return equalType.subclass(*args_, **kwargs_)
        else:
            return equalType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_value2(self): return self.value2
    def set_value2(self, value2): self.value2 = value2
    def get_value1(self): return self.value1
    def set_value1(self, value1): self.value1 = value1
    def hasContent_(self):
        if (
            super(equalType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='equalType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='equalType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='equalType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='equalType'):
        super(equalType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='equalType')
        if self.value2 is not None and 'value2' not in already_processed:
            already_processed.add('value2')
            outfile.write(' value2=%s' % (self.gds_format_string(quote_attrib(self.value2).encode(ExternalEncoding), input_name='value2'), ))
        if self.value1 is not None and 'value1' not in already_processed:
            already_processed.add('value1')
            outfile.write(' value1=%s' % (self.gds_format_string(quote_attrib(self.value1).encode(ExternalEncoding), input_name='value1'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='equalType', fromsubclass_=False, pretty_print=True):
        super(equalType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def exportLiteral(self, outfile, level, name_='equalType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.value2 is not None and 'value2' not in already_processed:
            already_processed.add('value2')
            showIndent(outfile, level)
            outfile.write('value2="%s",\n' % (self.value2,))
        if self.value1 is not None and 'value1' not in already_processed:
            already_processed.add('value1')
            showIndent(outfile, level)
            outfile.write('value1="%s",\n' % (self.value1,))
        super(equalType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(equalType, self).exportLiteralChildren(outfile, level, name_)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value2', node)
        if value is not None and 'value2' not in already_processed:
            already_processed.add('value2')
            self.value2 = value
        value = find_attr_value_('value1', node)
        if value is not None and 'value1' not in already_processed:
            already_processed.add('value1')
            self.value1 = value
        super(equalType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(equalType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class equalType


class notEqualType(clauseType):
    subclass = None
    superclass = clauseType
    def __init__(self, value2=None, value1=None):
        self.original_tagname_ = None
        super(notEqualType, self).__init__()
        self.value2 = _cast(None, value2)
        self.value1 = _cast(None, value1)
    def factory(*args_, **kwargs_):
        if notEqualType.subclass:
            return notEqualType.subclass(*args_, **kwargs_)
        else:
            return notEqualType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_value2(self): return self.value2
    def set_value2(self, value2): self.value2 = value2
    def get_value1(self): return self.value1
    def set_value1(self, value1): self.value1 = value1
    def hasContent_(self):
        if (
            super(notEqualType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='notEqualType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='notEqualType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='notEqualType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='notEqualType'):
        super(notEqualType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='notEqualType')
        if self.value2 is not None and 'value2' not in already_processed:
            already_processed.add('value2')
            outfile.write(' value2=%s' % (self.gds_format_string(quote_attrib(self.value2).encode(ExternalEncoding), input_name='value2'), ))
        if self.value1 is not None and 'value1' not in already_processed:
            already_processed.add('value1')
            outfile.write(' value1=%s' % (self.gds_format_string(quote_attrib(self.value1).encode(ExternalEncoding), input_name='value1'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='notEqualType', fromsubclass_=False, pretty_print=True):
        super(notEqualType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def exportLiteral(self, outfile, level, name_='notEqualType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.value2 is not None and 'value2' not in already_processed:
            already_processed.add('value2')
            showIndent(outfile, level)
            outfile.write('value2="%s",\n' % (self.value2,))
        if self.value1 is not None and 'value1' not in already_processed:
            already_processed.add('value1')
            showIndent(outfile, level)
            outfile.write('value1="%s",\n' % (self.value1,))
        super(notEqualType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(notEqualType, self).exportLiteralChildren(outfile, level, name_)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value2', node)
        if value is not None and 'value2' not in already_processed:
            already_processed.add('value2')
            self.value2 = value
        value = find_attr_value_('value1', node)
        if value is not None and 'value1' not in already_processed:
            already_processed.add('value1')
            self.value1 = value
        super(notEqualType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(notEqualType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class notEqualType


class betweenType(clauseType):
    subclass = None
    superclass = clauseType
    def __init__(self, max=None, value=None, min=None):
        self.original_tagname_ = None
        super(betweenType, self).__init__()
        self.max = _cast(None, max)
        self.value = _cast(None, value)
        self.min = _cast(None, min)
    def factory(*args_, **kwargs_):
        if betweenType.subclass:
            return betweenType.subclass(*args_, **kwargs_)
        else:
            return betweenType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_max(self): return self.max
    def set_max(self, max): self.max = max
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def get_min(self): return self.min
    def set_min(self, min): self.min = min
    def hasContent_(self):
        if (
            super(betweenType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='betweenType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='betweenType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='betweenType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='betweenType'):
        super(betweenType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='betweenType')
        if self.max is not None and 'max' not in already_processed:
            already_processed.add('max')
            outfile.write(' max=%s' % (self.gds_format_string(quote_attrib(self.max).encode(ExternalEncoding), input_name='max'), ))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_format_string(quote_attrib(self.value).encode(ExternalEncoding), input_name='value'), ))
        if self.min is not None and 'min' not in already_processed:
            already_processed.add('min')
            outfile.write(' min=%s' % (self.gds_format_string(quote_attrib(self.min).encode(ExternalEncoding), input_name='min'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='betweenType', fromsubclass_=False, pretty_print=True):
        super(betweenType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def exportLiteral(self, outfile, level, name_='betweenType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.max is not None and 'max' not in already_processed:
            already_processed.add('max')
            showIndent(outfile, level)
            outfile.write('max="%s",\n' % (self.max,))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            showIndent(outfile, level)
            outfile.write('value="%s",\n' % (self.value,))
        if self.min is not None and 'min' not in already_processed:
            already_processed.add('min')
            showIndent(outfile, level)
            outfile.write('min="%s",\n' % (self.min,))
        super(betweenType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(betweenType, self).exportLiteralChildren(outfile, level, name_)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('max', node)
        if value is not None and 'max' not in already_processed:
            already_processed.add('max')
            self.max = value
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
        value = find_attr_value_('min', node)
        if value is not None and 'min' not in already_processed:
            already_processed.add('min')
            self.min = value
        super(betweenType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(betweenType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class betweenType


class notBetweenType(clauseType):
    subclass = None
    superclass = clauseType
    def __init__(self, max=None, value=None, min=None):
        self.original_tagname_ = None
        super(notBetweenType, self).__init__()
        self.max = _cast(None, max)
        self.value = _cast(None, value)
        self.min = _cast(None, min)
    def factory(*args_, **kwargs_):
        if notBetweenType.subclass:
            return notBetweenType.subclass(*args_, **kwargs_)
        else:
            return notBetweenType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_max(self): return self.max
    def set_max(self, max): self.max = max
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def get_min(self): return self.min
    def set_min(self, min): self.min = min
    def hasContent_(self):
        if (
            super(notBetweenType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='notBetweenType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='notBetweenType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='notBetweenType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='notBetweenType'):
        super(notBetweenType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='notBetweenType')
        if self.max is not None and 'max' not in already_processed:
            already_processed.add('max')
            outfile.write(' max=%s' % (self.gds_format_string(quote_attrib(self.max).encode(ExternalEncoding), input_name='max'), ))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_format_string(quote_attrib(self.value).encode(ExternalEncoding), input_name='value'), ))
        if self.min is not None and 'min' not in already_processed:
            already_processed.add('min')
            outfile.write(' min=%s' % (self.gds_format_string(quote_attrib(self.min).encode(ExternalEncoding), input_name='min'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='notBetweenType', fromsubclass_=False, pretty_print=True):
        super(notBetweenType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def exportLiteral(self, outfile, level, name_='notBetweenType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.max is not None and 'max' not in already_processed:
            already_processed.add('max')
            showIndent(outfile, level)
            outfile.write('max="%s",\n' % (self.max,))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            showIndent(outfile, level)
            outfile.write('value="%s",\n' % (self.value,))
        if self.min is not None and 'min' not in already_processed:
            already_processed.add('min')
            showIndent(outfile, level)
            outfile.write('min="%s",\n' % (self.min,))
        super(notBetweenType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(notBetweenType, self).exportLiteralChildren(outfile, level, name_)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('max', node)
        if value is not None and 'max' not in already_processed:
            already_processed.add('max')
            self.max = value
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
        value = find_attr_value_('min', node)
        if value is not None and 'min' not in already_processed:
            already_processed.add('min')
            self.min = value
        super(notBetweenType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(notBetweenType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class notBetweenType


class orType(clauseType):
    subclass = None
    superclass = clauseType
    def __init__(self, clause=None):
        self.original_tagname_ = None
        super(orType, self).__init__()
        if clause is None:
            self.clause = []
        else:
            self.clause = clause
    def factory(*args_, **kwargs_):
        if orType.subclass:
            return orType.subclass(*args_, **kwargs_)
        else:
            return orType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_clause(self): return self.clause
    def set_clause(self, clause): self.clause = clause
    def add_clause(self, value): self.clause.append(value)
    def insert_clause_at(self, index, value): self.clause.insert(index, value)
    def replace_clause_at(self, index, value): self.clause[index] = value
    def hasContent_(self):
        if (
            self.clause or
            super(orType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='orType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='orType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='orType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='orType'):
        super(orType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='orType')
    def exportChildren(self, outfile, level, namespace_='', name_='orType', fromsubclass_=False, pretty_print=True):
        super(orType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for clause_ in self.clause:
            clause_.export(outfile, level, namespace_, name_='clause', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='orType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(orType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(orType, self).exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('clause=[\n')
        level += 1
        for clause_ in self.clause:
            showIndent(outfile, level)
            outfile.write('model_.clauseType(\n')
            clause_.exportLiteral(outfile, level, name_='clauseType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(orType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'clause':
            type_name_ = child_.attrib.get(
                '{http://www.w3.org/2001/XMLSchema-instance}type')
            if type_name_ is None:
                type_name_ = child_.attrib.get('type')
            if type_name_ is not None:
                type_names_ = type_name_.split(':')
                if len(type_names_) == 1:
                    type_name_ = type_names_[0]
                else:
                    type_name_ = type_names_[1]
                class_ = globals()[type_name_]
                obj_ = class_.factory()
                obj_.build(child_)
            else:
                raise NotImplementedError(
                    'Class not implemented for <clause> element')
            self.clause.append(obj_)
            obj_.original_tagname_ = 'clause'
        super(orType, self).buildChildren(child_, node, nodeName_, True)
# end class orType


class andType(clauseType):
    subclass = None
    superclass = clauseType
    def __init__(self, clause=None):
        self.original_tagname_ = None
        super(andType, self).__init__()
        if clause is None:
            self.clause = []
        else:
            self.clause = clause
    def factory(*args_, **kwargs_):
        if andType.subclass:
            return andType.subclass(*args_, **kwargs_)
        else:
            return andType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_clause(self): return self.clause
    def set_clause(self, clause): self.clause = clause
    def add_clause(self, value): self.clause.append(value)
    def insert_clause_at(self, index, value): self.clause.insert(index, value)
    def replace_clause_at(self, index, value): self.clause[index] = value
    def hasContent_(self):
        if (
            self.clause or
            super(andType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='andType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='andType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='andType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='andType'):
        super(andType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='andType')
    def exportChildren(self, outfile, level, namespace_='', name_='andType', fromsubclass_=False, pretty_print=True):
        super(andType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for clause_ in self.clause:
            clause_.export(outfile, level, namespace_, name_='clause', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='andType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(andType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(andType, self).exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('clause=[\n')
        level += 1
        for clause_ in self.clause:
            showIndent(outfile, level)
            outfile.write('model_.clauseType(\n')
            clause_.exportLiteral(outfile, level, name_='clauseType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(andType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'clause':
            type_name_ = child_.attrib.get(
                '{http://www.w3.org/2001/XMLSchema-instance}type')
            if type_name_ is None:
                type_name_ = child_.attrib.get('type')
            if type_name_ is not None:
                type_names_ = type_name_.split(':')
                if len(type_names_) == 1:
                    type_name_ = type_names_[0]
                else:
                    type_name_ = type_names_[1]
                class_ = globals()[type_name_]
                obj_ = class_.factory()
                obj_.build(child_)
            else:
                raise NotImplementedError(
                    'Class not implemented for <clause> element')
            self.clause.append(obj_)
            obj_.original_tagname_ = 'clause'
        super(andType, self).buildChildren(child_, node, nodeName_, True)
# end class andType


class factType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, extensiontype_=None):
        self.original_tagname_ = None
        self.name = _cast(None, name)
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if factType.subclass:
            return factType.subclass(*args_, **kwargs_)
        else:
            return factType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='factType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='factType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='factType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='factType'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespace_='', name_='factType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='factType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name="%s",\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class factType


class predicateType(factType):
    subclass = None
    superclass = factType
    def __init__(self, name=None, value=None):
        self.original_tagname_ = None
        super(predicateType, self).__init__(name, )
        self.value = _cast(None, value)
    def factory(*args_, **kwargs_):
        if predicateType.subclass:
            return predicateType.subclass(*args_, **kwargs_)
        else:
            return predicateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def hasContent_(self):
        if (
            super(predicateType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='predicateType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='predicateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='predicateType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='predicateType'):
        super(predicateType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='predicateType')
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_format_string(quote_attrib(self.value).encode(ExternalEncoding), input_name='value'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='predicateType', fromsubclass_=False, pretty_print=True):
        super(predicateType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def exportLiteral(self, outfile, level, name_='predicateType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            showIndent(outfile, level)
            outfile.write('value="%s",\n' % (self.value,))
        super(predicateType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(predicateType, self).exportLiteralChildren(outfile, level, name_)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
        super(predicateType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(predicateType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class predicateType


class structType(factType):
    subclass = None
    superclass = factType
    def __init__(self, name=None, comment=None, field=None):
        self.original_tagname_ = None
        super(structType, self).__init__(name, )
        self.comment = comment
        if field is None:
            self.field = []
        else:
            self.field = field
    def factory(*args_, **kwargs_):
        if structType.subclass:
            return structType.subclass(*args_, **kwargs_)
        else:
            return structType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def get_field(self): return self.field
    def set_field(self, field): self.field = field
    def add_field(self, value): self.field.append(value)
    def insert_field_at(self, index, value): self.field.insert(index, value)
    def replace_field_at(self, index, value): self.field[index] = value
    def hasContent_(self):
        if (
            self.comment is not None or
            self.field or
            super(structType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='structType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='structType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='structType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='structType'):
        super(structType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='structType')
    def exportChildren(self, outfile, level, namespace_='', name_='structType', fromsubclass_=False, pretty_print=True):
        super(structType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
        for field_ in self.field:
            field_.export(outfile, level, namespace_, name_='field', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='structType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(structType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(structType, self).exportLiteralChildren(outfile, level, name_)
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('field=[\n')
        level += 1
        for field_ in self.field:
            showIndent(outfile, level)
            outfile.write('model_.fieldType(\n')
            field_.exportLiteral(outfile, level, name_='fieldType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(structType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
        elif nodeName_ == 'field':
            obj_ = fieldType.factory()
            obj_.build(child_)
            self.field.append(obj_)
            obj_.original_tagname_ = 'field'
        super(structType, self).buildChildren(child_, node, nodeName_, True)
# end class structType


class instanceType(factType):
    subclass = None
    superclass = factType
    def __init__(self, name=None, type_=None, comment=None, field=None):
        self.original_tagname_ = None
        super(instanceType, self).__init__(name, )
        self.type_ = _cast(None, type_)
        self.comment = comment
        if field is None:
            self.field = []
        else:
            self.field = field
    def factory(*args_, **kwargs_):
        if instanceType.subclass:
            return instanceType.subclass(*args_, **kwargs_)
        else:
            return instanceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def get_field(self): return self.field
    def set_field(self, field): self.field = field
    def add_field(self, value): self.field.append(value)
    def insert_field_at(self, index, value): self.field.insert(index, value)
    def replace_field_at(self, index, value): self.field[index] = value
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def hasContent_(self):
        if (
            self.comment is not None or
            self.field or
            super(instanceType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='instanceType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='instanceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='instanceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='instanceType'):
        super(instanceType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='instanceType')
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (self.gds_format_string(quote_attrib(self.type_).encode(ExternalEncoding), input_name='type'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='instanceType', fromsubclass_=False, pretty_print=True):
        super(instanceType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
        for field_ in self.field:
            field_.export(outfile, level, namespace_, name_='field', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='instanceType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            showIndent(outfile, level)
            outfile.write('type_="%s",\n' % (self.type_,))
        super(instanceType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(instanceType, self).exportLiteralChildren(outfile, level, name_)
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('field=[\n')
        level += 1
        for field_ in self.field:
            showIndent(outfile, level)
            outfile.write('model_.fieldType5(\n')
            field_.exportLiteral(outfile, level, name_='fieldType5')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
        super(instanceType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
        elif nodeName_ == 'field':
            obj_ = fieldType5.factory()
            obj_.build(child_)
            self.field.append(obj_)
            obj_.original_tagname_ = 'field'
        super(instanceType, self).buildChildren(child_, node, nodeName_, True)
# end class instanceType


class actionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, extensiontype_=None):
        self.original_tagname_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if actionType.subclass:
            return actionType.subclass(*args_, **kwargs_)
        else:
            return actionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='actionType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='actionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='actionType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='actionType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='actionType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='actionType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class actionType


class setType(actionType):
    subclass = None
    superclass = actionType
    def __init__(self, name=None, value=None):
        self.original_tagname_ = None
        super(setType, self).__init__()
        self.name = _cast(None, name)
        self.value = _cast(None, value)
    def factory(*args_, **kwargs_):
        if setType.subclass:
            return setType.subclass(*args_, **kwargs_)
        else:
            return setType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def hasContent_(self):
        if (
            super(setType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='setType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='setType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='setType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='setType'):
        super(setType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='setType')
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_format_string(quote_attrib(self.value).encode(ExternalEncoding), input_name='value'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='setType', fromsubclass_=False, pretty_print=True):
        super(setType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def exportLiteral(self, outfile, level, name_='setType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name="%s",\n' % (self.name,))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            showIndent(outfile, level)
            outfile.write('value="%s",\n' % (self.value,))
        super(setType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(setType, self).exportLiteralChildren(outfile, level, name_)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
        super(setType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(setType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class setType


class runRuleType(actionType):
    subclass = None
    superclass = actionType
    def __init__(self, name=None, argument=None):
        self.original_tagname_ = None
        super(runRuleType, self).__init__()
        self.name = _cast(None, name)
        if argument is None:
            self.argument = []
        else:
            self.argument = argument
    def factory(*args_, **kwargs_):
        if runRuleType.subclass:
            return runRuleType.subclass(*args_, **kwargs_)
        else:
            return runRuleType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_argument(self): return self.argument
    def set_argument(self, argument): self.argument = argument
    def add_argument(self, value): self.argument.append(value)
    def insert_argument_at(self, index, value): self.argument.insert(index, value)
    def replace_argument_at(self, index, value): self.argument[index] = value
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def hasContent_(self):
        if (
            self.argument or
            super(runRuleType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='runRuleType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='runRuleType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='runRuleType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='runRuleType'):
        super(runRuleType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='runRuleType')
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='runRuleType', fromsubclass_=False, pretty_print=True):
        super(runRuleType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for argument_ in self.argument:
            argument_.export(outfile, level, namespace_, name_='argument', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='runRuleType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name="%s",\n' % (self.name,))
        super(runRuleType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(runRuleType, self).exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('argument=[\n')
        level += 1
        for argument_ in self.argument:
            showIndent(outfile, level)
            outfile.write('model_.argumentType(\n')
            argument_.exportLiteral(outfile, level, name_='argumentType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        super(runRuleType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'argument':
            obj_ = argumentType.factory()
            obj_.build(child_)
            self.argument.append(obj_)
            obj_.original_tagname_ = 'argument'
        super(runRuleType, self).buildChildren(child_, node, nodeName_, True)
# end class runRuleType


class ExpertSystem(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, comment=None, fact=None, rule=None):
        self.original_tagname_ = None
        if comment is None:
            self.comment = []
        else:
            self.comment = comment
        if fact is None:
            self.fact = []
        else:
            self.fact = fact
        if rule is None:
            self.rule = []
        else:
            self.rule = rule
    def factory(*args_, **kwargs_):
        if ExpertSystem.subclass:
            return ExpertSystem.subclass(*args_, **kwargs_)
        else:
            return ExpertSystem(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def add_comment(self, value): self.comment.append(value)
    def insert_comment_at(self, index, value): self.comment.insert(index, value)
    def replace_comment_at(self, index, value): self.comment[index] = value
    def get_fact(self): return self.fact
    def set_fact(self, fact): self.fact = fact
    def add_fact(self, value): self.fact.append(value)
    def insert_fact_at(self, index, value): self.fact.insert(index, value)
    def replace_fact_at(self, index, value): self.fact[index] = value
    def get_rule(self): return self.rule
    def set_rule(self, rule): self.rule = rule
    def add_rule(self, value): self.rule.append(value)
    def insert_rule_at(self, index, value): self.rule.insert(index, value)
    def replace_rule_at(self, index, value): self.rule[index] = value
    def hasContent_(self):
        if (
            self.comment or
            self.fact or
            self.rule
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ExpertSystem', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ExpertSystem')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ExpertSystem', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ExpertSystem'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ExpertSystem', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for comment_ in self.comment:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(comment_).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
        for fact_ in self.fact:
            fact_.export(outfile, level, namespace_, name_='fact', pretty_print=pretty_print)
        for rule_ in self.rule:
            rule_.export(outfile, level, namespace_, name_='rule', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ExpertSystem'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('comment=[\n')
        level += 1
        for comment_ in self.comment:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(comment_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('fact=[\n')
        level += 1
        for fact_ in self.fact:
            showIndent(outfile, level)
            outfile.write('model_.factType(\n')
            fact_.exportLiteral(outfile, level, name_='factType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('rule=[\n')
        level += 1
        for rule_ in self.rule:
            showIndent(outfile, level)
            outfile.write('model_.ruleType(\n')
            rule_.exportLiteral(outfile, level, name_='ruleType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment.append(comment_)
        elif nodeName_ == 'fact':
            type_name_ = child_.attrib.get(
                '{http://www.w3.org/2001/XMLSchema-instance}type')
            if type_name_ is None:
                type_name_ = child_.attrib.get('type')
            if type_name_ is not None:
                type_names_ = type_name_.split(':')
                if len(type_names_) == 1:
                    type_name_ = type_names_[0]
                else:
                    type_name_ = type_names_[1]
                class_ = globals()[type_name_]
                obj_ = class_.factory()
                obj_.build(child_)
            else:
                raise NotImplementedError(
                    'Class not implemented for <fact> element')
            self.fact.append(obj_)
            obj_.original_tagname_ = 'fact'
        elif nodeName_ == 'rule':
            obj_ = ruleType.factory()
            obj_.build(child_)
            self.rule.append(obj_)
            obj_.original_tagname_ = 'rule'
# end class ExpertSystem


class algorithmType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RadialBasisFunctionNetwork=None, MultiLayerPerceptron=None):
        self.original_tagname_ = None
        self.RadialBasisFunctionNetwork = RadialBasisFunctionNetwork
        self.MultiLayerPerceptron = MultiLayerPerceptron
    def factory(*args_, **kwargs_):
        if algorithmType.subclass:
            return algorithmType.subclass(*args_, **kwargs_)
        else:
            return algorithmType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RadialBasisFunctionNetwork(self): return self.RadialBasisFunctionNetwork
    def set_RadialBasisFunctionNetwork(self, RadialBasisFunctionNetwork): self.RadialBasisFunctionNetwork = RadialBasisFunctionNetwork
    def get_MultiLayerPerceptron(self): return self.MultiLayerPerceptron
    def set_MultiLayerPerceptron(self, MultiLayerPerceptron): self.MultiLayerPerceptron = MultiLayerPerceptron
    def hasContent_(self):
        if (
            self.RadialBasisFunctionNetwork is not None or
            self.MultiLayerPerceptron is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='algorithmType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='algorithmType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='algorithmType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='algorithmType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='algorithmType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RadialBasisFunctionNetwork is not None:
            self.RadialBasisFunctionNetwork.export(outfile, level, namespace_, name_='RadialBasisFunctionNetwork', pretty_print=pretty_print)
        if self.MultiLayerPerceptron is not None:
            self.MultiLayerPerceptron.export(outfile, level, namespace_, name_='MultiLayerPerceptron', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='algorithmType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.RadialBasisFunctionNetwork is not None:
            showIndent(outfile, level)
            outfile.write('RadialBasisFunctionNetwork=model_.RadialBasisFunctionNetwork(\n')
            self.RadialBasisFunctionNetwork.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.MultiLayerPerceptron is not None:
            showIndent(outfile, level)
            outfile.write('MultiLayerPerceptron=model_.MultiLayerPerceptron(\n')
            self.MultiLayerPerceptron.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RadialBasisFunctionNetwork':
            obj_ = RadialBasisFunctionNetwork.factory()
            obj_.build(child_)
            self.RadialBasisFunctionNetwork = obj_
            obj_.original_tagname_ = 'RadialBasisFunctionNetwork'
        elif nodeName_ == 'MultiLayerPerceptron':
            obj_ = MultiLayerPerceptron.factory()
            obj_.build(child_)
            self.MultiLayerPerceptron = obj_
            obj_.original_tagname_ = 'MultiLayerPerceptron'
# end class algorithmType


class algorithmType4(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RecurrentNeuralNetwork=None):
        self.original_tagname_ = None
        self.RecurrentNeuralNetwork = RecurrentNeuralNetwork
    def factory(*args_, **kwargs_):
        if algorithmType4.subclass:
            return algorithmType4.subclass(*args_, **kwargs_)
        else:
            return algorithmType4(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RecurrentNeuralNetwork(self): return self.RecurrentNeuralNetwork
    def set_RecurrentNeuralNetwork(self, RecurrentNeuralNetwork): self.RecurrentNeuralNetwork = RecurrentNeuralNetwork
    def hasContent_(self):
        if (
            self.RecurrentNeuralNetwork is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='algorithmType4', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='algorithmType4')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='algorithmType4', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='algorithmType4'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='algorithmType4', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RecurrentNeuralNetwork is not None:
            self.RecurrentNeuralNetwork.export(outfile, level, namespace_, name_='RecurrentNeuralNetwork', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='algorithmType4'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.RecurrentNeuralNetwork is not None:
            showIndent(outfile, level)
            outfile.write('RecurrentNeuralNetwork=model_.RecurrentNeuralNetwork(\n')
            self.RecurrentNeuralNetwork.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RecurrentNeuralNetwork':
            obj_ = RecurrentNeuralNetwork.factory()
            obj_.build(child_)
            self.RecurrentNeuralNetwork = obj_
            obj_.original_tagname_ = 'RecurrentNeuralNetwork'
# end class algorithmType4


class fieldType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, initialValue=None, type_=None, name=None):
        self.original_tagname_ = None
        self.initialValue = _cast(None, initialValue)
        self.type_ = _cast(None, type_)
        self.name = _cast(None, name)
    def factory(*args_, **kwargs_):
        if fieldType.subclass:
            return fieldType.subclass(*args_, **kwargs_)
        else:
            return fieldType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_initialValue(self): return self.initialValue
    def set_initialValue(self, initialValue): self.initialValue = initialValue
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='fieldType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='fieldType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='fieldType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='fieldType'):
        if self.initialValue is not None and 'initialValue' not in already_processed:
            already_processed.add('initialValue')
            outfile.write(' initialValue=%s' % (self.gds_format_string(quote_attrib(self.initialValue).encode(ExternalEncoding), input_name='initialValue'), ))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (self.gds_format_string(quote_attrib(self.type_).encode(ExternalEncoding), input_name='type'), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='fieldType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='fieldType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.initialValue is not None and 'initialValue' not in already_processed:
            already_processed.add('initialValue')
            showIndent(outfile, level)
            outfile.write('initialValue="%s",\n' % (self.initialValue,))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            showIndent(outfile, level)
            outfile.write('type_="%s",\n' % (self.type_,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name="%s",\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('initialValue', node)
        if value is not None and 'initialValue' not in already_processed:
            already_processed.add('initialValue')
            self.initialValue = value
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class fieldType


class fieldType5(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, value=None):
        self.original_tagname_ = None
        self.name = _cast(None, name)
        self.value = _cast(None, value)
    def factory(*args_, **kwargs_):
        if fieldType5.subclass:
            return fieldType5.subclass(*args_, **kwargs_)
        else:
            return fieldType5(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='fieldType5', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='fieldType5')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='fieldType5', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='fieldType5'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_format_string(quote_attrib(self.value).encode(ExternalEncoding), input_name='value'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='fieldType5', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='fieldType5'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name="%s",\n' % (self.name,))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            showIndent(outfile, level)
            outfile.write('value="%s",\n' % (self.value,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class fieldType5


class argumentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, value=None):
        self.original_tagname_ = None
        self.name = _cast(None, name)
        self.value = _cast(None, value)
    def factory(*args_, **kwargs_):
        if argumentType.subclass:
            return argumentType.subclass(*args_, **kwargs_)
        else:
            return argumentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='argumentType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='argumentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='argumentType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='argumentType'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_format_string(quote_attrib(self.value).encode(ExternalEncoding), input_name='value'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='argumentType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='argumentType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name="%s",\n' % (self.name,))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            showIndent(outfile, level)
            outfile.write('value="%s",\n' % (self.value,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class argumentType


class ruleType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, comment=None, parameter=None, if_=None, then=None, else_=None):
        self.original_tagname_ = None
        self.name = _cast(None, name)
        self.comment = comment
        if parameter is None:
            self.parameter = []
        else:
            self.parameter = parameter
        self.if_ = if_
        self.then = then
        self.else_ = else_
    def factory(*args_, **kwargs_):
        if ruleType.subclass:
            return ruleType.subclass(*args_, **kwargs_)
        else:
            return ruleType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def get_parameter(self): return self.parameter
    def set_parameter(self, parameter): self.parameter = parameter
    def add_parameter(self, value): self.parameter.append(value)
    def insert_parameter_at(self, index, value): self.parameter.insert(index, value)
    def replace_parameter_at(self, index, value): self.parameter[index] = value
    def get_if(self): return self.if_
    def set_if(self, if_): self.if_ = if_
    def get_then(self): return self.then
    def set_then(self, then): self.then = then
    def get_else(self): return self.else_
    def set_else(self, else_): self.else_ = else_
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def hasContent_(self):
        if (
            self.comment is not None or
            self.parameter or
            self.if_ is not None or
            self.then is not None or
            self.else_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ruleType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ruleType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ruleType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ruleType'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ruleType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
        for parameter_ in self.parameter:
            parameter_.export(outfile, level, namespace_, name_='parameter', pretty_print=pretty_print)
        if self.if_ is not None:
            self.if_.export(outfile, level, namespace_, name_='if', pretty_print=pretty_print)
        if self.then is not None:
            self.then.export(outfile, level, namespace_, name_='then', pretty_print=pretty_print)
        if self.else_ is not None:
            self.else_.export(outfile, level, namespace_, name_='else', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ruleType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name="%s",\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('parameter=[\n')
        level += 1
        for parameter_ in self.parameter:
            showIndent(outfile, level)
            outfile.write('model_.parameterType(\n')
            parameter_.exportLiteral(outfile, level, name_='parameterType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.if_ is not None:
            showIndent(outfile, level)
            outfile.write('if_=model_.ifType(\n')
            self.if_.exportLiteral(outfile, level, name_='if')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.then is not None:
            showIndent(outfile, level)
            outfile.write('then=model_.thenType(\n')
            self.then.exportLiteral(outfile, level, name_='then')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.else_ is not None:
            showIndent(outfile, level)
            outfile.write('else_=model_.elseType(\n')
            self.else_.exportLiteral(outfile, level, name_='else')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
        elif nodeName_ == 'parameter':
            obj_ = parameterType.factory()
            obj_.build(child_)
            self.parameter.append(obj_)
            obj_.original_tagname_ = 'parameter'
        elif nodeName_ == 'if':
            obj_ = ifType.factory()
            obj_.build(child_)
            self.if_ = obj_
            obj_.original_tagname_ = 'if'
        elif nodeName_ == 'then':
            obj_ = thenType.factory()
            obj_.build(child_)
            self.then = obj_
            obj_.original_tagname_ = 'then'
        elif nodeName_ == 'else':
            obj_ = elseType.factory()
            obj_.build(child_)
            self.else_ = obj_
            obj_.original_tagname_ = 'else'
# end class ruleType


class parameterType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_=None, name=None):
        self.original_tagname_ = None
        self.type_ = _cast(None, type_)
        self.name = _cast(None, name)
    def factory(*args_, **kwargs_):
        if parameterType.subclass:
            return parameterType.subclass(*args_, **kwargs_)
        else:
            return parameterType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='parameterType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='parameterType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='parameterType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='parameterType'):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (self.gds_format_string(quote_attrib(self.type_).encode(ExternalEncoding), input_name='type'), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='parameterType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='parameterType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            showIndent(outfile, level)
            outfile.write('type_="%s",\n' % (self.type_,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name="%s",\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class parameterType


class ifType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, clause=None):
        self.original_tagname_ = None
        self.clause = clause
    def factory(*args_, **kwargs_):
        if ifType.subclass:
            return ifType.subclass(*args_, **kwargs_)
        else:
            return ifType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_clause(self): return self.clause
    def set_clause(self, clause): self.clause = clause
    def hasContent_(self):
        if (
            self.clause is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ifType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ifType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ifType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ifType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ifType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.clause is not None:
            self.clause.export(outfile, level, namespace_, name_='clause', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ifType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.clauseType is not None:
            showIndent(outfile, level)
            outfile.write('clauseType=model_.clauseType(\n')
            self.clauseType.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'clause':
            type_name_ = child_.attrib.get(
                '{http://www.w3.org/2001/XMLSchema-instance}type')
            if type_name_ is None:
                type_name_ = child_.attrib.get('type')
            if type_name_ is not None:
                type_names_ = type_name_.split(':')
                if len(type_names_) == 1:
                    type_name_ = type_names_[0]
                else:
                    type_name_ = type_names_[1]
                class_ = globals()[type_name_]
                obj_ = class_.factory()
                obj_.build(child_)
            else:
                raise NotImplementedError(
                    'Class not implemented for <clause> element')
            self.clause = obj_
            obj_.original_tagname_ = 'clause'
# end class ifType


class thenType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, action=None):
        self.original_tagname_ = None
        self.action = action
    def factory(*args_, **kwargs_):
        if thenType.subclass:
            return thenType.subclass(*args_, **kwargs_)
        else:
            return thenType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_action(self): return self.action
    def set_action(self, action): self.action = action
    def hasContent_(self):
        if (
            self.action is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='thenType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='thenType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='thenType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='thenType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='thenType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.action is not None:
            self.action.export(outfile, level, namespace_, name_='action', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='thenType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.actionType is not None:
            showIndent(outfile, level)
            outfile.write('actionType=model_.actionType(\n')
            self.actionType.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'action':
            type_name_ = child_.attrib.get(
                '{http://www.w3.org/2001/XMLSchema-instance}type')
            if type_name_ is None:
                type_name_ = child_.attrib.get('type')
            if type_name_ is not None:
                type_names_ = type_name_.split(':')
                if len(type_names_) == 1:
                    type_name_ = type_names_[0]
                else:
                    type_name_ = type_names_[1]
                class_ = globals()[type_name_]
                obj_ = class_.factory()
                obj_.build(child_)
            else:
                raise NotImplementedError(
                    'Class not implemented for <action> element')
            self.action = obj_
            obj_.original_tagname_ = 'action'
# end class thenType


class elseType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, action=None):
        self.original_tagname_ = None
        self.action = action
    def factory(*args_, **kwargs_):
        if elseType.subclass:
            return elseType.subclass(*args_, **kwargs_)
        else:
            return elseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_action(self): return self.action
    def set_action(self, action): self.action = action
    def hasContent_(self):
        if (
            self.action is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='elseType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='elseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='elseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='elseType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='elseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.action is not None:
            self.action.export(outfile, level, namespace_, name_='action', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='elseType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.actionType is not None:
            showIndent(outfile, level)
            outfile.write('actionType=model_.actionType(\n')
            self.actionType.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'action':
            type_name_ = child_.attrib.get(
                '{http://www.w3.org/2001/XMLSchema-instance}type')
            if type_name_ is None:
                type_name_ = child_.attrib.get('type')
            if type_name_ is not None:
                type_names_ = type_name_.split(':')
                if len(type_names_) == 1:
                    type_name_ = type_names_[0]
                else:
                    type_name_ = type_names_[1]
                class_ = globals()[type_name_]
                obj_ = class_.factory()
                obj_.build(child_)
            else:
                raise NotImplementedError(
                    'Class not implemented for <action> element')
            self.action = obj_
            obj_.original_tagname_ = 'action'
# end class elseType


GDSClassesMapping = {
    'then': thenType,
    'algorithm': algorithmType4,
    'clause': clauseType,
    'argument': argumentType,
    'rule': ruleType,
    'else': elseType,
    'field': fieldType5,
    'action': actionType,
    'parameter': parameterType,
    'fact': factType,
    'if': ifType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'MeetCI'
        rootClass = MeetCI
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'MeetCI'
        rootClass = MeetCI
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    parser = None
    doc = parsexml_(StringIO(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'MeetCI'
        rootClass = MeetCI
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'MeetCI'
        rootClass = MeetCI
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from meetCI import *\n\n')
        sys.stdout.write('import meetCI as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "ExpertSystem",
    "MachineLearning",
    "MeetCI",
    "MultiLayerPerceptron",
    "RadialBasisFunctionNetwork",
    "RandomForest",
    "RecurrentNeuralNetwork",
    "SupportVectorMachine",
    "actionType",
    "algorithmType",
    "algorithmType4",
    "andType",
    "argumentType",
    "betweenType",
    "classification",
    "clauseType",
    "elseType",
    "equalType",
    "factType",
    "fieldType",
    "fieldType5",
    "greaterThanOrEqualType",
    "greaterThanType",
    "ifType",
    "instanceType",
    "lessThanOrEqualType",
    "lessThanType",
    "notBetweenType",
    "notEqualType",
    "orType",
    "parameterType",
    "predicateType",
    "prediction",
    "ruleType",
    "runRuleType",
    "setType",
    "structType",
    "thenType"
]
